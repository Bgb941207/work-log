[{"authors":null,"categories":null,"content":"工作日誌DAY39 1.開始進行設備插槽合理性修改\n","date":1755854133,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"727bffc735bbca80cbdad383eb0f9b3e","permalink":"https://bgb941207.github.io/work-log/post/20250822/","publishdate":"2025-08-22T17:15:33+08:00","relpermalink":"/work-log/post/20250822/","section":"post","summary":"工作日誌DAY39","tags":null,"title":"2025-08-22","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY38 1.人工確認設備類型分類合理性\n2.開始進行設備插槽合理性盤查\n","date":1755854085,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"b253f1f8072ab71a4fc2f9a0227faae1","permalink":"https://bgb941207.github.io/work-log/post/20250821/","publishdate":"2025-08-22T17:14:45+08:00","relpermalink":"/work-log/post/20250821/","section":"post","summary":"工作日誌DAY38","tags":null,"title":"2025-08-21","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY37 1.完成廠務會議簡報內容彙整\n","date":1755669995,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"2fc0d95d84fcd787a25cf9016ba99eb2","permalink":"https://bgb941207.github.io/work-log/post/20250820/","publishdate":"2025-08-20T14:06:35+08:00","relpermalink":"/work-log/post/20250820/","section":"post","summary":"工作日誌DAY37","tags":null,"title":"2025-08-20","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY36 1.繼續進行張濱廠廠務報告簡報內容彙整\n","date":1755595094,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"3d6aec40cf3865d6493b99464c15a661","permalink":"https://bgb941207.github.io/work-log/post/20250819/","publishdate":"2025-08-19T17:18:14+08:00","relpermalink":"/work-log/post/20250819/","section":"post","summary":"工作日誌DAY36","tags":null,"title":"2025-08-19","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY35 1.繼續進行張濱廠廠務報告簡報內容彙整\n","date":1755502996,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"1c2c3524b461cc2862a73bbd11e9460d","permalink":"https://bgb941207.github.io/work-log/post/20250818/","publishdate":"2025-08-18T15:43:16+08:00","relpermalink":"/work-log/post/20250818/","section":"post","summary":"工作日誌DAY35","tags":null,"title":"2025-08-18","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY33 1.進行張濱廠廠務報告簡報內容彙整\n2.向經理確認全興廠不確定的設備\n","date":1755162611,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"40090c4b6b7f1d3396e455914b26c644","permalink":"https://bgb941207.github.io/work-log/post/20250814/","publishdate":"2025-08-14T17:10:11+08:00","relpermalink":"/work-log/post/20250814/","section":"post","summary":"工作日誌DAY33","tags":null,"title":"2025-08-14","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY32 1.進行全興廠與張濱廠廠務報告簡報內容彙整\n","date":1755078354,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"938b7ab5fb5b68e318c3fd7792a4640f","permalink":"https://bgb941207.github.io/work-log/post/20250813/","publishdate":"2025-08-13T17:45:54+08:00","relpermalink":"/work-log/post/20250813/","section":"post","summary":"工作日誌DAY32","tags":null,"title":"2025-08-13","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY31 1.繼續進行全興廠廠務報告簡報內容彙整\n","date":1754991710,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"3d4a35f18a28a33fdfdb7d0a6673a67e","permalink":"https://bgb941207.github.io/work-log/post/20250812/","publishdate":"2025-08-12T17:41:50+08:00","relpermalink":"/work-log/post/20250812/","section":"post","summary":"工作日誌DAY31","tags":null,"title":"2025-08-12","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY30 1.進行全興廠廠務報告簡報內容彙整\n","date":1754895019,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"c5db32bf1e1deaab93896219bd99378b","permalink":"https://bgb941207.github.io/work-log/post/20250811/","publishdate":"2025-08-11T14:50:19+08:00","relpermalink":"/work-log/post/20250811/","section":"post","summary":"工作日誌DAY30","tags":null,"title":"2025-08-11","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY27 1.開會討論關於設備收斂的方式及所需時間\n","date":1754467855,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"0d13535ae3d6176641bc1cbcf7c0a68b","permalink":"https://bgb941207.github.io/work-log/post/20250806/","publishdate":"2025-08-06T16:10:55+08:00","relpermalink":"/work-log/post/20250806/","section":"post","summary":"工作日誌DAY27","tags":null,"title":"2025-08-06","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY24 1.將設備資料裡的所有鼓風機與其設備ID、設備組成單獨列出成csv檔方便後續操作\n","date":1754032841,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"0fd3ea1155cf8e89a4cb94ebb20f5c01","permalink":"https://bgb941207.github.io/work-log/post/20250801/","publishdate":"2025-08-01T15:20:41+08:00","relpermalink":"/work-log/post/20250801/","section":"post","summary":"工作日誌DAY24","tags":null,"title":"2025-08-01","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY23 1.對利澤廠公用系統的設備組成進行設備名稱及類型標準化檢查\n2.將不符的項目進行修改或新增通用主設備類型\n","date":1753946996,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"02520542291717965d344cf286d0161f","permalink":"https://bgb941207.github.io/work-log/post/20250731/","publishdate":"2025-07-31T15:29:56+08:00","relpermalink":"/work-log/post/20250731/","section":"post","summary":"工作日誌DAY23","tags":null,"title":"2025-07-31","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY22 1.對利澤廠廠成成品入庫系統的設備組成進行設備名稱及類型標準化檢查\n2.將不符的項目進行修改或新增通用主設備類型\n","date":1753946992,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"c01cf03ee3b1531801cbc6538ea62927","permalink":"https://bgb941207.github.io/work-log/post/20250730/","publishdate":"2025-07-31T15:29:52+08:00","relpermalink":"/work-log/post/20250730/","section":"post","summary":"工作日誌DAY22","tags":null,"title":"2025-07-30","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY21 1.對八里廠#1#2研磨系統的設備組成進行設備名稱及類型標準化檢查\n2.將不符的項目進行修改或新增通用主設備類型\n","date":1753771936,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"38cca93d27cfd9900da5aec8860280df","permalink":"https://bgb941207.github.io/work-log/post/20250729/","publishdate":"2025-07-29T14:52:16+08:00","relpermalink":"/work-log/post/20250729/","section":"post","summary":"工作日誌DAY21","tags":null,"title":"2025-07-29","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY20 1.對八里廠#1#2研磨系統的設備組成進行設備收斂\n2.將設備類型更變為系統中已存在或新增的通用設備類型\n","date":1753692903,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"055a2f1d75a0c8d05f101225e25c6027","permalink":"https://bgb941207.github.io/work-log/post/20250728/","publishdate":"2025-07-28T16:55:03+08:00","relpermalink":"/work-log/post/20250728/","section":"post","summary":"工作日誌DAY20","tags":null,"title":"2025-07-28","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY18 1.開會討論關於MTBF系統中設備類型收斂相關事項並研究收斂方法\n2.將各廠廠務會議維修項目除設備類型與更換零件以外都填寫完成\n","date":1753405009,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"0fdfe90cdbc4e75a4fff9a4289263233","permalink":"https://bgb941207.github.io/work-log/post/20250724/","publishdate":"2025-07-25T08:56:49+08:00","relpermalink":"/work-log/post/20250724/","section":"post","summary":"工作日誌DAY18","tags":null,"title":"2025-07-24","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY19 1.對比系統和工務隊提供之設備組成並列舉出相異處\n","date":1753404987,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"9713e1cf795e2d870dc57166ad3cb95d","permalink":"https://bgb941207.github.io/work-log/post/20250725/","publishdate":"2025-07-25T08:56:27+08:00","relpermalink":"/work-log/post/20250725/","section":"post","summary":"工作日誌DAY19","tags":null,"title":"2025-07-25","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY17 1.與經理討論應填寫之標題名稱\n2.彙整利澤廠廠務會議資料\n","date":1753255630,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"3cfcdc1ab04d0750d2e1067cb5747adf","permalink":"https://bgb941207.github.io/work-log/post/20250723/","publishdate":"2025-07-23T15:27:10+08:00","relpermalink":"/work-log/post/20250723/","section":"post","summary":"工作日誌DAY17","tags":null,"title":"2025-07-23","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY16 1.完成八里廠廠務會議簡報維修項目彙整\n2.彙整彰濱廠及全興廠廠務會議簡報維修項目中\n","date":1753166040,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"036e69d5dbac28b9cd4783e4b9917ad9","permalink":"https://bgb941207.github.io/work-log/post/20250722/","publishdate":"2025-07-22T14:34:00+08:00","relpermalink":"/work-log/post/20250722/","section":"post","summary":"工作日誌DAY16","tags":null,"title":"2025-07-22","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY15 1.開會\n2.彙整各廠廠務會議簡報維修項目\n","date":1753058903,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"e7ad68d2a20a6c169562734a88918a38","permalink":"https://bgb941207.github.io/work-log/post/20250721/","publishdate":"2025-07-21T08:48:23+08:00","relpermalink":"/work-log/post/20250721/","section":"post","summary":"工作日誌DAY15","tags":null,"title":"2025-07-21","type":"post"},{"authors":null,"categories":null,"content":"Excel 超連結批次新增工具 此 Python 程式用於自動化處理指定資料夾及其子資料夾內所有 Excel 檔（.xlsx / .xlsm）， 將每張工作表 C 欄的文字自動設為可點擊的超連結，並套用預設超連結樣式。\n特色功能 ✅ 遞迴遍歷：自動搜尋指定根資料夾及其所有子目錄的 Excel 檔 ✅ 檔案過濾：跳過暫存檔（以 ~$ 開頭）與非 .xlsx/.xlsm 檔案 ✅ 批次新增：將 C 欄中非空字串設為超連結，並套用「Hyperlink」樣式 ✅ 變更檢測：只有在檔案確實被修改後才重新儲存，減少不必要 I/O ✅ 集中參數區：程式頂端統一設定根目錄路徑，簡易維護 參數設定 於程式最上方調整以下變數即可指定待轉換檔案之根資料夾：\n1 2 3 # ======= 在這裡指定你的根資料夾路徑 ======= ROOT_FOLDER = r\u0026#34;C:\\Users\\USER\\Desktop\\ppt_2_excel_相對路徑\\全興廠\u0026#34; # ===================================== 核心函式 add_hyperlinks_in_c(root_dir: str) -\u0026gt; None 遞迴搜尋 root_dir 下所有 Excel 檔案，並將每個檔案中每張工作表 C 欄的文字加入超連結。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def add_hyperlinks_in_c(root_dir): \u0026#39;\u0026#39;\u0026#39; 遞迴搜尋 root_dir 下所有 .xlsx/.xlsm 檔案， 並把每個檔案中每張表格 C 欄的文字，設為超連結。 \u0026#39;\u0026#39;\u0026#39; for dirpath, _, filenames in os.walk(root_dir): for fn in filenames: # 1. 跳過 Excel 暫存檔與非 .xlsx/.xlsm if fn.startswith(\u0026#34;~$\u0026#34;) or not fn.lower().endswith((\u0026#34;.xlsx\u0026#34;, \u0026#34;.xlsm\u0026#34;)): continue full_path = os.path.join(dirpath, fn) print(f\u0026#34;Processing: {full_path}\u0026#34;) wb = load_workbook(full_path) changed = False # 2. 遍歷所有工作表與每列 C 欄 for ws in wb.worksheets: for row in range(1, ws.max_row + 1): cell = ws.cell(row=row, column=3) # 第3欄 (C) addr = cell.value if isinstance(addr, str) and addr.strip(): # 3. 若尚未設定同地址的超連結，則加入 if getattr(cell, \u0026#34;hyperlink\u0026#34;, None) != addr: cell.hyperlink = addr cell.style = \u0026#34;Hyperlink\u0026#34; changed = True # 4. 若有修改，則儲存 if changed: wb.save(full_path) print(\u0026#34; → Saved with hyperlinks.\u0026#34;) else: print(\u0026#34; → No changes needed.\u0026#34;) print(\u0026#34;Done.\u0026#34;) 主程式流程 載入模組與設定 ROOT_FOLDER。 呼叫 add_hyperlinks_in_c(ROOT_FOLDER) 遞迴處理所有符合條件的檔案。 1 2 if __name__ == \u0026#34;__main__\u0026#34;: add_hyperlinks_in_c(ROOT_FOLDER) 執行指令 於 Terminal 中輸入：\n1 python hyperlink.py 輸入後程式將依序列出處理中的檔案路徑與儲存狀況，直至顯示 Done.。\n完整程式碼檔案 🔗hyperlink.py\n","date":1752824635,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"0f17e556a40b216d9a05d1389758d785","permalink":"https://bgb941207.github.io/work-log/post/hyperlink/","publishdate":"2025-07-18T15:43:55+08:00","relpermalink":"/work-log/post/hyperlink/","section":"post","summary":"Excel 超連結批次新增工具","tags":null,"title":"Hyperlink","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY14 1.使用自動腳本輸出全興廠，八里廠，利澤廠 和彰濱廠 廠務會議簡報資料成Excel檔\n2.將Excel檔中的圖片連結更換為相對路徑，並賺寫程式將其設為超連結\n","date":1752823936,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"62806fa0bd79706311ea9baa69f9ad3c","permalink":"https://bgb941207.github.io/work-log/post/20250718/","publishdate":"2025-07-18T15:32:16+08:00","relpermalink":"/work-log/post/20250718/","section":"post","summary":"工作日誌DAY14","tags":null,"title":"202-07-18","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY13 1.撰寫自動將廠廠務會議PPT中維修內容輸出成excel檔和圖檔的腳本🔗PPT_to_Excel.py\n2.使用自動腳本輸出八里廠與觀音廠會議記錄\n","date":1752734391,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"0528905f8e8edd2eea7e6e039a33c109","permalink":"https://bgb941207.github.io/work-log/post/20250717/","publishdate":"2025-07-17T14:39:51+08:00","relpermalink":"/work-log/post/20250717/","section":"post","summary":"工作日誌DAY13","tags":null,"title":"2025-07-17","type":"post"},{"authors":null,"categories":null,"content":"PPT_to_Excel \u0026amp; IMG 工具 此 Python 程式用於自動化處理資料夾及子資料夾內的所有 PPT 檔， 根據「工作項目說明」至「工作計畫說明」的頁面範圍， 將文字擷取至 Excel，並將該範圍投影片匯出為 JPG 圖片。\n特色功能 ✅ 遞迴遍歷：自動遍歷指定資料夾及其子資料夾的 .ppt / .pptx 檔案 ✅ 範圍偵測：以「工作項目說明」為起始頁，「工作計畫說明」為終止頁，自動定位範圍 ✅ Excel 輸出：擷取文字內容，移除不支援的控制字元，輸出至 .xlsx，並於 C 欄填入對應截圖的絕對路徑 ✅ 圖片匯出：將範圍內的每頁投影片批次匯出為 JPG 圖檔 ✅ 統一參數區：程式頂端集中管理所有可調整參數，方便日後維護 參數設定 程式頂端統一配置：\n1 2 3 4 5 6 7 8 9 10 # 由使用者在執行時輸入 INPUT_FOLDER = None # PPT 檔案根資料夾 # 輸出設定 OUTPUT_ROOT = r\u0026#34; \u0026#34; # 最終輸出根目錄，改成想存檔的資料夾 IMG_FORMAT = \u0026#39;jpg\u0026#39; # 匯出圖片格式：\u0026#39;jpg\u0026#39; / \u0026#39;png\u0026#39; # 偵測範圍關鍵字(可以自行更改) START_KEYWORD = \u0026#34;工作項目說明\u0026#34; #本月工作項目報告 END_KEYWORD = \u0026#34;工作計畫說明\u0026#34; #下個月工作計劃說明 核心函式 1. sanitize_text(text: str) -\u0026gt; str 移除 Excel 不支援的控制字元（ASCII 0x00-0x1F，保留 \\t,\\n,\\r）。\n1 2 3 4 5 def sanitize_text(text): return \u0026#39;\u0026#39;.join( c for c in text if c in (\u0026#39;\\t\u0026#39;,\u0026#39;\\n\u0026#39;,\u0026#39;\\r\u0026#39;) or ord(c) \u0026gt;= 32 ) 2. find_slide_range(ppt_path, start_kw, end_kw) -\u0026gt; (int, int) 掃描簡報文字，找到首個含 start_kw 的頁碼作為 start_idx， 接著尋找 end_kw 作為 end_idx；若任一關鍵字缺失，回傳 (None, None)。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def find_slide_range(ppt_path, start_kw, end_kw): try: prs = Presentation(ppt_path) except Exception: return None, None start_idx = end_idx = None for idx, slide in enumerate(prs.slides, start=1): text = \u0026#39;\u0026#39;.join( shape.text for shape in slide.shapes if hasattr(shape, \u0026#39;text\u0026#39;) and shape.text ) if start_idx is None and start_kw in text: start_idx = idx if start_idx and end_kw in text: end_idx = idx break return start_idx, end_idx 3. extract_text_to_excel(...) 將指定範圍的文字匯出至 Excel，並在 C 欄寫入對應截圖路徑：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def extract_text_to_excel( ppt_path, excel_path, start_slide, end_slide, image_dir=None, img_format=\u0026#39;jpg\u0026#39; ): try: prs = Presentation(ppt_path) except Exception: wb = Workbook(); ws = wb.active ws.cell(1,1,\u0026#39;Result\u0026#39;); ws.cell(2,1,\u0026#39;無\u0026#39;); wb.save(excel_path) return wb = Workbook(); ws = wb.active; ws.title = \u0026#39;Slides_Text\u0026#39; ws.append([\u0026#39;Slide Number\u0026#39;, \u0026#39;Text Content\u0026#39;, \u0026#39;Image Path\u0026#39;]) for idx, slide in enumerate(prs.slides, start=1): if idx \u0026lt; start_slide or idx \u0026gt; end_slide: continue texts = [] for shape in slide.shapes: if getattr(shape, \u0026#39;has_text_frame\u0026#39;, False): txt = shape.text.strip() if txt: texts.append(txt) content = sanitize_text(\u0026#39;\\n\u0026#39;.join(texts)) or \u0026#39;無文字\u0026#39; row = [idx, content] if image_dir: img = f\u0026#39;slide_{idx}.{img_format}\u0026#39; row.append(os.path.abspath(os.path.join(image_dir, img))) ws.append(row) wb.save(excel_path) 4. export_images(...) 透過 PowerPoint COM API，將範圍內的投影片匯出為圖片：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def export_images( ppt_path, output_dir, img_format, start_slide, end_slide ): path = os.path.abspath(ppt_path) if not os.path.exists(path): print(f\u0026#34;[Error] 檔案不存在: {path}\u0026#34;) return app = win32com.client.Dispatch(\u0026#39;PowerPoint.Application\u0026#39;) pres = app.Presentations.Open(path, ReadOnly=1, WithWindow=0) os.makedirs(output_dir, exist_ok=True) total = pres.Slides.Count end_idx = min(end_slide, total) for i in range(start_slide, end_idx+1): dest = os.path.join(output_dir, f\u0026#39;slide_{i}.{img_format}\u0026#39;) pres.Slides.Item(i).Export(dest, img_format) pres.Close(); app.Quit() 主程式流程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if __name__ == \u0026#39;__main__\u0026#39;: INPUT_FOLDER = input(\u0026#39;請輸入 PPT 資料夾路徑：\u0026#39;).strip().strip(\u0026#39;\u0026#34;\\\u0026#39;\u0026#39;) folder = Path(INPUT_FOLDER) if not folder.is_dir(): print(f\u0026#34;[Error] 資料夾不存在: {INPUT_FOLDER}\u0026#34;) sys.exit(1) for ppt in folder.rglob(\u0026#39;*.ppt*\u0026#39;): num = re.match(r\u0026#39;^(\\\\d+)\u0026#39;, ppt.stem) base = num.group(1) if num else ppt.stem out_dir = Path(OUTPUT_ROOT) / base out_dir.mkdir(parents=True, exist_ok=True) excel = out_dir / f\u0026#34;{base}.xlsx\u0026#34; s, e = find_slide_range(str(ppt), START_KEYWORD, END_KEYWORD) if not s or not e: wb = Workbook(); ws = wb.active ws.cell(1,1,\u0026#39;Result\u0026#39;); ws.cell(2,1,\u0026#39;無\u0026#39;); wb.save(excel) continue extract_text_to_excel(str(ppt), str(excel), s, e, image_dir=str(out_dir), img_format=IMG_FORMAT) export_images(str(ppt), str(out_dir), IMG_FORMAT, s, e) print(\u0026#39;全部檔案處理完成，輸出於:\u0026#39;, OUTPUT_ROOT) 執行指令 於Terminal中輸入以下指令:\n1 python ppt_to_excel.py 輸入資料夾後，程式將依序顯示偵測範圍與匯出進度，範例如下:\n1 2 3 4 5 請輸入 PPT 資料夾路徑：\u0026#34;C:\\Users\\USER\\Desktop\\ppts\u0026#34; [11301] 偵測到範圍：第18頁 → 第30頁 ✔ 已儲存 Excel: C:\\...\\11301\\11301.xlsx ✔ 匯出圖片 第18頁 → C:\\...\\11301\\slide_18.jpg ... 完整程式碼檔案 🔗ppt_to_excel.py\n","date":1752716355,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"60d5169cf81ace812ba7eeb475e91cb7","permalink":"https://bgb941207.github.io/work-log/post/ppttoexcel/","publishdate":"2025-07-17T09:39:15+08:00","relpermalink":"/work-log/post/ppttoexcel/","section":"post","summary":"PPT_to_Excel \u0026 IMG 工具","tags":null,"title":"PPT_to_Excel","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY12 1.依照圖控系統資訊補齊八里廠MTBF系統中缺失的設備\n2.將系統中被誤設為鼓風機之收塵風機進行設備類型修正\n","date":1752637802,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"ad1dcd8d4d57e9c3c28252da43e8f887","permalink":"https://bgb941207.github.io/work-log/post/20250716/","publishdate":"2025-07-16T11:50:02+08:00","relpermalink":"/work-log/post/20250716/","section":"post","summary":"工作日誌DAY12","tags":null,"title":"2025-07-16","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY11 1.整理在彙整八里廠2025年5月到7月廠務會議簡報時所遇到的 問題\n2.討論設備分類標準化的可行方式，並嘗試建立對應的整理機制。\n","date":1752546331,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"2b1760ee939b27b4093e83200b3482d2","permalink":"https://bgb941207.github.io/work-log/post/20250715/","publishdate":"2025-07-15T10:25:31+08:00","relpermalink":"/work-log/post/20250715/","section":"post","summary":"工作日誌DAY11","tags":null,"title":"2025-07-15","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY10 1.整理八里廠2025年5月到7月廠務會議簡報，並紀錄維修項目\n","date":1752471780,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"1ea2dc5d5c2233c58173ea4a73037b9f","permalink":"https://bgb941207.github.io/work-log/post/20250714/","publishdate":"2025-07-14T13:43:00+08:00","relpermalink":"/work-log/post/20250714/","section":"post","summary":"工作日誌DAY10","tags":null,"title":"2025-07-14","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY9 1.觀音廠剩下待加設備\n2.完成將觀音廠google sheet資料匯入\n","date":1752198117,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"84d6cfabc9450f8030c18b63d7d32ad0","permalink":"https://bgb941207.github.io/work-log/post/20250711/","publishdate":"2025-07-11T09:41:57+08:00","relpermalink":"/work-log/post/20250711/","section":"post","summary":"工作日誌DAY9","tags":null,"title":"2025-07-11","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY8 1.完成觀音廠空白設備類型子零件插槽設定\n2.協助將觀音廠google sheet資料匯入新系統中(尚未完成)\n","date":1752112106,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"e87c92b43572e98f972a18ed25ea497f","permalink":"https://bgb941207.github.io/work-log/post/20250710/","publishdate":"2025-07-10T09:48:26+08:00","relpermalink":"/work-log/post/20250710/","section":"post","summary":"工作日誌DAY8","tags":null,"title":"2025-07-10","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY7 1.觀音廠圖控Tag對應MTBF系統盤點\n2.協助將龍德廠就系統維修單資料移埴至新MTBF系統中\n3.完成觀音廠部分設備類型設定\n","date":1752031941,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"c380a9b891c656d714481b5a57286465","permalink":"https://bgb941207.github.io/work-log/post/20250709/","publishdate":"2025-07-09T11:32:21+08:00","relpermalink":"/work-log/post/20250709/","section":"post","summary":"工作日誌DAY7","tags":null,"title":"2025-07-09","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY6 1.完成gitlab pages到github上的移殖\n2.在MTBF系統中為觀音廠新增磨機主設備\n3.龍德廠圖控Tag對應MTBF系統盤點\n","date":1751941462,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"5951a0b9e1c3da590a39d41508153129","permalink":"https://bgb941207.github.io/work-log/post/20250708/","publishdate":"2025-07-08T10:24:22+08:00","relpermalink":"/work-log/post/20250708/","section":"post","summary":"工作日誌DAY6","tags":null,"title":"2025-07-08","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY5 1.學習有關typescript的知識。\n參考資料:\nTypeScript 魔法 - 喚醒你的程式碼靈感\nTypeScript 教學：初學者的超強 JavaScript 指南\nLearn TypeScript in 50 Minutes - TypeScript Beginner Crash Course\n2.學習關於API的知識並撰寫API的相關資料於API概述\n參考資料:\n什麼是 RESTful API？\n什麼是 API? RESTful API 該怎麼理解? 3.練習markdown語法之版面配置語法\n參考資料:\n使用 VS Code 來開發 Markdown ","date":1751870737,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"3cb535418a9cccca8c4ff093717ebfcd","permalink":"https://bgb941207.github.io/work-log/post/2025-07-07/","publishdate":"2025-07-07T14:45:37+08:00","relpermalink":"/work-log/post/2025-07-07/","section":"post","summary":"工作日誌DAY5","tags":null,"title":"2025-07-07","type":"post"},{"authors":null,"categories":null,"content":"API 以下為關於API的一些簡單整理:\n1.關於API: API(Application Programming Interface)API是一組定義好的規則，描述不同軟體系統之間如何互相溝通與互動。例如:\n1 2 3 ○ 向其他應用程式或伺服器請求資料 ○ 呼叫特定功能，讓應用程式執行某些操作 2.API 的類型： 1 2 3 4 5 ○ REST API:最流行的API類型，基於HTTP協定，使用URL表示資源，並以JSON格式傳輸資料。簡潔、靈活，易於整合與維護。 ○ SOAP API:一種較早期的API規範，基於XML格式傳輸資料，具有嚴格結構與安全設計。 ○ GraphQL:一種新興API技術，由Facebook推出。允許客戶端自定義所需的資料欄位，並以一次請求取得多筆資料，減少資料冗餘與請求次數。 3.API 的作用： 1 2 3 4 5 ○ 資料共享:讓不同系統之間同步資料，例如手機App與伺服器之間的互動。 ○ 功能整合:將外部服務整合到自身應用中，例如：金流、地圖、ChatGPT等。 ○ 系統擴展:API使開發者能在不變動核心架構下，為既有系統增加新功能。 4.RESTful API: REST(Representational State Transfer)是一種設計網路API的架構風格，符合它設計原則的API就稱為RESTful API。\nRESTful API的特性: 1 2 3 4 5 6 7 8 9 ○ 基於標準的HTTP方法 ○ 每個資源(如使用者、商品)都有唯一的URL ○ 使用統一格式(通常為JSON)進行資料交換 ○ 無狀態(Stateless)伺服器不會記住前一次請求的狀態 ○ 支援快取(Caching)，提升效能與可擴展性 常用HTTP方法對應操作： 1 2 3 4 5 6 7 ○ GET:取得資料 ○ POST:新增資料 ○ PUT:修改資料 ○ DELETE:刪除資料 RESTful API的三大核心優勢: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ○ 可擴展性: △配合快取策略，可減少不必要的請求，利於系統橫向擴展 △減輕伺服器負擔，提升系統整體效能。 ○ 靈活性: △客戶端與伺服器相互獨立，並解耦各種伺服器元件。 △各層可獨立維護與升級，例如後端可以更換資料庫或框架而不影響前端。 △容易維護與更新，可快速演進系統功能。 ○ 獨立性: △可以使用各種程式設計語言來編寫用戶端和伺服器應用程式，不會影響API設計。 △可以在不影響通訊的情況下，變更任一端的基礎技術。 ","date":1751867155,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"b35e24d9256d9ac1dfdcf078c4f8580f","permalink":"https://bgb941207.github.io/work-log/post/api/","publishdate":"2025-07-07T13:45:55+08:00","relpermalink":"/work-log/post/api/","section":"post","summary":"API","tags":null,"title":"API概述","type":"post"},{"authors":null,"categories":null,"content":"excel轉成yaml檔的程式 這份 Python 程式設計用來將 Excel 中的結構化資料轉換成 YAML 格式。特色如下：\n✅ 支援 Excel 多欄位資料選擇與欄位轉換 ✅ 自動合併設備編號與名稱為單一欄位 ✅ 支援某些欄位轉為 YAML list 格式 ✅ 自訂 YAML 字串格式（加單引號）、縮排與輸出格式 1.引用函式庫 匯入程式所需的標準與第三方套件：\n1 2 3 4 import os import re import pandas as pd import yaml os: 操作系統功能（如路徑處理） re: 正規表達式處理字串 pandas: 讀取與處理 Excel 資料 yaml: 將資料結構轉成 YAML 格式輸出 2.參數設定 定義檔案路徑、要讀取的工作表與欄位，以及 YAML 的輸出格式設定:\n1 2 3 4 5 6 7 8 9 10 11 EXCEL_PATH = \u0026#34;re_2025.xlsx\u0026#34; SHEET_NAME = 2 # 要選第幾個工作表(從0開始) SELECTED_COLUMNS = [\u0026#34;設備編號\u0026#34;, \u0026#34;設備名稱\u0026#34;, \u0026#34;設備類型\u0026#34;, \u0026#34;循環系統\u0026#34;] KEY_MAP = { \u0026#34;設備名稱\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;設備類型\u0026#34;: \u0026#34;machineType\u0026#34;, \u0026#34;循環系統\u0026#34;: \u0026#34;machineSystems\u0026#34; } LIST_FIELDS = [\u0026#34;machineSystems\u0026#34;] OUTPUT_SHEET_NAME = \u0026#34;觀音廠\u0026#34; YAML_INDENT = 3 # 縮排參數 3.格式設定與縮排 為了讓輸出的 YAML 檔案符合特定格式需求，我們加入以下客製化設定：\n1 2 3 4 5 6 7 8 # 字串加單引號 class SingleQuoted(str): pass def representer(dumper, data): return dumper.represent_scalar(\u0026#39;tag:yaml.org,2002:str\u0026#39;, data, style=\u0026#34;\u0026#39;\u0026#34;) yaml.add_representer(SingleQuoted, representer) 這段程式會讓所有字串輸出時自動加上單引號 ‘…’，例如 ‘P-0601.主機A’ 1 2 3 4 # 縮排 class IndentDumper(yaml.Dumper): def increase_indent(self, flow=False, indentless=False): return super().increase_indent(flow, indentless=False) 這段確保 YAML 檔案縮排正確，避免列表格式錯亂問題 4.資料轉換函式 這個函式會逐筆讀取 Excel 每一列資料，轉成 dictionary 並處理欄位轉換與格式化。\n1 2 3 4 5 6 7 8 # 資料轉換 def rows2dict(data_rows, key_map, list_fields): result = [] for row in data_rows: item = {} id = str(row.get(\u0026#34;設備編號\u0026#34;, \u0026#34;\u0026#34;)).strip() name = str(row.get(\u0026#34;設備名稱\u0026#34;, \u0026#34;\u0026#34;)).strip() id 是設備編號，例如 P-0601 name 是設備名稱，例如 P-0601主機A，我們會試著從中拆出和設備編號重複的部分。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 for col_name, value in row.items(): if col_name == \u0026#34;設備編號\u0026#34;: continue key = key_map.get(col_name, col_name) # 處理 name 欄位 if key == \u0026#34;name\u0026#34;: # 嘗試找到 id 的前綴在 name 中出現的位置 for i in range(len(id), 0, -1): prefix = id[:i] if name.startswith(prefix): suffix = name[len(prefix):] name_suffix = re.sub(r\u0026#39;^[\\s\\-:]+\u0026#39;, \u0026#39;\u0026#39;, suffix).strip() item[key] = SingleQuoted(f\u0026#34;{id}.{name_suffix}\u0026#34;) break else: # 如果完全沒有前綴相符，就用原始 name item[key] = SingleQuoted(f\u0026#34;{id}.{name}\u0026#34;) continue 這段會試圖從名稱中把編號前綴抽出，只保留剩下的「設備名稱」部分。 效果如下: 設備編號 設備名稱 輸出name A-1234 設備A A-1234.設備A B-2345 B-2345設備B B-2345.設備B C-3456 #1設備C C-3456.#1設備C 1 2 3 4 5 6 7 8 9 value_str = str(value).strip() if key in list_fields: item[key] = [SingleQuoted(value_str)] else: item[key] = SingleQuoted(value_str) result.append(item) return result machineSystems 等欄位會以 YAML 陣列格式輸出，例如： machineSystems: ‘油壓系統’ 5.主函式 這個主程式會：\n開啟 Excel 篩選需要的欄位 呼叫 rows2dict() 處理資料 將結果輸出為 YAML 檔案 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def excel2yaml( excel_path, sheet_name=0, selected_columns=None, key_map=None, list_fields=None, output_name=None ): # 讀取 xls = pd.ExcelFile(excel_path) title = xls.sheet_names[sheet_name] if isinstance(sheet_name, int) else sheet_name df = pd.read_excel(xls, sheet_name=sheet_name) if selected_columns: df = df[selected_columns] data_rows = df.to_dict(orient=\u0026#34;records\u0026#34;) transformed_data = rows2dict( data_rows, key_map or {}, list_fields or [] ) # 輸出結構 dict = {output_name or title: transformed_data} output_file = f\u0026#34;{output_name or title}.yaml\u0026#34; with open(output_file, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: yaml.dump( dict, f, allow_unicode=True, sort_keys=False, width=float(\u0026#34;inf\u0026#34;), indent=YAML_INDENT, Dumper=IndentDumper ) print(f\u0026#34;輸出完成：{output_file}\u0026#34;) 6.程式執行 當程式被直接執行時，會呼叫 excel2yaml() 並帶入我們預先設定的參數。\n1 2 3 4 5 6 7 8 9 10 # 執行程式 if __name__ == \u0026#34;__main__\u0026#34;: excel2yaml( excel_path=EXCEL_PATH, sheet_name=SHEET_NAME, selected_columns=SELECTED_COLUMNS, key_map=KEY_MAP, list_fields=LIST_FIELDS, output_name=OUTPUT_SHEET_NAME ) 以下為轉換後的 YAML 範例（含單引號與縮排）： 1 2 3 4 5 觀音廠: - name: \u0026#39;B-0117.#1M系收塵風機\u0026#39; machineType: \u0026#39;M系風車\u0026#39; machineSystems: - \u0026#39;研磨系統#1#2\u0026#39; 完整程式碼檔案: 🔗 excel2yaml.py\n","date":1751608224,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"98de5f0438edc1b03e1a3fbcbc4afe96","permalink":"https://bgb941207.github.io/work-log/post/excel_to_yaml/","publishdate":"2025-07-04T13:50:24+08:00","relpermalink":"/work-log/post/excel_to_yaml/","section":"post","summary":"excel轉成yaml檔的程式","tags":null,"title":"Excel_to_yaml.py","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY4 1.完成八里廠新系統舊資料輸入與初始化\n2.修改excel_to_yaml程式已知問題 =\u0026gt; 新增編號重複之命名問題\n","date":1751599147,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"3cdc2d55bae0b3c26489c58353ffdd2d","permalink":"https://bgb941207.github.io/work-log/post/20250704/","publishdate":"2025-07-04T11:19:07+08:00","relpermalink":"/work-log/post/20250704/","section":"post","summary":"工作日誌DAY4","tags":null,"title":"2025-07-04","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY3 1.excel轉yaml程式優化\n2.學習在vscode中以node.js環境使用typescript和javascript語言\n3.協助將八里廠google sheet資料匯入新系統中\n","date":1751508491,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"5c3e4d4255c0371bc5bcd6cdae13fa4b","permalink":"https://bgb941207.github.io/work-log/post/20250703/","publishdate":"2025-07-03T10:08:11+08:00","relpermalink":"/work-log/post/20250703/","section":"post","summary":"工作日誌DAY3","tags":null,"title":"2025-07-03","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY2 1.早上開了晨會\n2.完成工作日誌網站構建\n3.下午填寫八里廠報修單歷史資料\n4.寫了一個小程式把excel轉乘yaml\n","date":1751422091,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"52ef2ddecdb14faa99378c374e30e24c","permalink":"https://bgb941207.github.io/work-log/post/20250702/","publishdate":"2025-07-02T10:08:11+08:00","relpermalink":"/work-log/post/20250702/","section":"post","summary":"工作日誌DAY2","tags":null,"title":"2025-07-02","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY1 1.學習了git和hugo的架構與創建實作\n2.閱讀MTBF相關手冊和系統登入\n","date":1751420070,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1755854380,"objectID":"be3d5cf9cd6acbc273a36563933ffdd6","permalink":"https://bgb941207.github.io/work-log/post/my-first-post/","publishdate":"2025-07-02T09:34:30+08:00","relpermalink":"/work-log/post/my-first-post/","section":"post","summary":"工作日誌DAY1","tags":null,"title":"2025-07-01","type":"post"}]