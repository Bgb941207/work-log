[{"authors":null,"categories":null,"content":"工作日誌DAY10 1.整理在彙整八里廠2025年5月到7月廠務會議簡報時所遇到的 問題\n2.討論設備分類標準化的可行方式，並嘗試建立對應的整理機制。\n","date":1752546331,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"2b1760ee939b27b4093e83200b3482d2","permalink":"https://bgb941207.github.io/work-log/post/20250715/","publishdate":"2025-07-15T10:25:31+08:00","relpermalink":"/work-log/post/20250715/","section":"post","summary":"工作日誌DAY10","tags":null,"title":"2025-07-15","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY10 1.整理八里廠2025年5月到7月廠務會議簡報，並紀錄維修項目\n","date":1752471780,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"1ea2dc5d5c2233c58173ea4a73037b9f","permalink":"https://bgb941207.github.io/work-log/post/20250714/","publishdate":"2025-07-14T13:43:00+08:00","relpermalink":"/work-log/post/20250714/","section":"post","summary":"工作日誌DAY10","tags":null,"title":"2025-07-14","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY9 1.觀音廠剩下待加設備\n2.完成將觀音廠google sheet資料匯入\n","date":1752198117,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"84d6cfabc9450f8030c18b63d7d32ad0","permalink":"https://bgb941207.github.io/work-log/post/20250711/","publishdate":"2025-07-11T09:41:57+08:00","relpermalink":"/work-log/post/20250711/","section":"post","summary":"工作日誌DAY9","tags":null,"title":"2025-07-11","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY8 1.完成觀音廠空白設備類型子零件插槽設定\n2.協助將觀音廠google sheet資料匯入新系統中(尚未完成)\n","date":1752112106,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"e87c92b43572e98f972a18ed25ea497f","permalink":"https://bgb941207.github.io/work-log/post/20250710/","publishdate":"2025-07-10T09:48:26+08:00","relpermalink":"/work-log/post/20250710/","section":"post","summary":"工作日誌DAY8","tags":null,"title":"2025-07-10","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY7 1.觀音廠圖控Tag對應MBTF系統盤點\n2.協助將龍德廠就系統維修單資料移埴至新MBTF系統中\n3.完成觀音廠部分設備類型設定\n","date":1752031941,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"c380a9b891c656d714481b5a57286465","permalink":"https://bgb941207.github.io/work-log/post/20250709/","publishdate":"2025-07-09T11:32:21+08:00","relpermalink":"/work-log/post/20250709/","section":"post","summary":"工作日誌DAY7","tags":null,"title":"2025-07-09","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY6 1.完成gitlab pages到github上的移殖\n2.在MBTF系統中為觀音廠新增磨機主設備\n3.龍德廠圖控Tag對應MBTF系統盤點\n","date":1751941462,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"5951a0b9e1c3da590a39d41508153129","permalink":"https://bgb941207.github.io/work-log/post/20250708/","publishdate":"2025-07-08T10:24:22+08:00","relpermalink":"/work-log/post/20250708/","section":"post","summary":"工作日誌DAY6","tags":null,"title":"2025-07-08","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY5 1.學習有關typescript的知識。\n參考資料:\nTypeScript 魔法 - 喚醒你的程式碼靈感\nTypeScript 教學：初學者的超強 JavaScript 指南\nLearn TypeScript in 50 Minutes - TypeScript Beginner Crash Course\n2.學習關於API的知識並撰寫API的相關資料於API概述\n參考資料:\n什麼是 RESTful API？\n什麼是 API? RESTful API 該怎麼理解? 3.練習markdown語法之版面配置語法\n參考資料:\n使用 VS Code 來開發 Markdown ","date":1751870737,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"3cb535418a9cccca8c4ff093717ebfcd","permalink":"https://bgb941207.github.io/work-log/post/2025-07-07/","publishdate":"2025-07-07T14:45:37+08:00","relpermalink":"/work-log/post/2025-07-07/","section":"post","summary":"工作日誌DAY5","tags":null,"title":"2025-07-07","type":"post"},{"authors":null,"categories":null,"content":"API 以下為關於API的一些簡單整理:\n1.關於API: API(Application Programming Interface)API是一組定義好的規則，描述不同軟體系統之間如何互相溝通與互動。例如:\n1 2 3 ○ 向其他應用程式或伺服器請求資料 ○ 呼叫特定功能，讓應用程式執行某些操作 2.API 的類型： 1 2 3 4 5 ○ REST API:最流行的API類型，基於HTTP協定，使用URL表示資源，並以JSON格式傳輸資料。簡潔、靈活，易於整合與維護。 ○ SOAP API:一種較早期的API規範，基於XML格式傳輸資料，具有嚴格結構與安全設計。 ○ GraphQL:一種新興API技術，由Facebook推出。允許客戶端自定義所需的資料欄位，並以一次請求取得多筆資料，減少資料冗餘與請求次數。 3.API 的作用： 1 2 3 4 5 ○ 資料共享:讓不同系統之間同步資料，例如手機App與伺服器之間的互動。 ○ 功能整合:將外部服務整合到自身應用中，例如：金流、地圖、ChatGPT等。 ○ 系統擴展:API使開發者能在不變動核心架構下，為既有系統增加新功能。 4.RESTful API: REST(Representational State Transfer)是一種設計網路API的架構風格，符合它設計原則的API就稱為RESTful API。\nRESTful API的特性: 1 2 3 4 5 6 7 8 9 ○ 基於標準的HTTP方法 ○ 每個資源(如使用者、商品)都有唯一的URL ○ 使用統一格式(通常為JSON)進行資料交換 ○ 無狀態(Stateless)伺服器不會記住前一次請求的狀態 ○ 支援快取(Caching)，提升效能與可擴展性 常用HTTP方法對應操作： 1 2 3 4 5 6 7 ○ GET:取得資料 ○ POST:新增資料 ○ PUT:修改資料 ○ DELETE:刪除資料 RESTful API的三大核心優勢: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ○ 可擴展性: △配合快取策略，可減少不必要的請求，利於系統橫向擴展 △減輕伺服器負擔，提升系統整體效能。 ○ 靈活性: △客戶端與伺服器相互獨立，並解耦各種伺服器元件。 △各層可獨立維護與升級，例如後端可以更換資料庫或框架而不影響前端。 △容易維護與更新，可快速演進系統功能。 ○ 獨立性: △可以使用各種程式設計語言來編寫用戶端和伺服器應用程式，不會影響API設計。 △可以在不影響通訊的情況下，變更任一端的基礎技術。 ","date":1751867155,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"b35e24d9256d9ac1dfdcf078c4f8580f","permalink":"https://bgb941207.github.io/work-log/post/api/","publishdate":"2025-07-07T13:45:55+08:00","relpermalink":"/work-log/post/api/","section":"post","summary":"API","tags":null,"title":"API概述","type":"post"},{"authors":null,"categories":null,"content":"excel轉成yaml檔的程式 這份 Python 程式設計用來將 Excel 中的結構化資料轉換成 YAML 格式。特色如下：\n✅ 支援 Excel 多欄位資料選擇與欄位轉換 ✅ 自動合併設備編號與名稱為單一欄位 ✅ 支援某些欄位轉為 YAML list 格式 ✅ 自訂 YAML 字串格式（加單引號）、縮排與輸出格式 1.引用函式庫 匯入程式所需的標準與第三方套件：\n1 2 3 4 import os import re import pandas as pd import yaml os: 操作系統功能（如路徑處理） re: 正規表達式處理字串 pandas: 讀取與處理 Excel 資料 yaml: 將資料結構轉成 YAML 格式輸出 2.參數設定 定義檔案路徑、要讀取的工作表與欄位，以及 YAML 的輸出格式設定:\n1 2 3 4 5 6 7 8 9 10 11 EXCEL_PATH = \u0026#34;re_2025.xlsx\u0026#34; SHEET_NAME = 2 # 要選第幾個工作表(從0開始) SELECTED_COLUMNS = [\u0026#34;設備編號\u0026#34;, \u0026#34;設備名稱\u0026#34;, \u0026#34;設備類型\u0026#34;, \u0026#34;循環系統\u0026#34;] KEY_MAP = { \u0026#34;設備名稱\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;設備類型\u0026#34;: \u0026#34;machineType\u0026#34;, \u0026#34;循環系統\u0026#34;: \u0026#34;machineSystems\u0026#34; } LIST_FIELDS = [\u0026#34;machineSystems\u0026#34;] OUTPUT_SHEET_NAME = \u0026#34;觀音廠\u0026#34; YAML_INDENT = 3 # 縮排參數 3.格式設定與縮排 為了讓輸出的 YAML 檔案符合特定格式需求，我們加入以下客製化設定：\n1 2 3 4 5 6 7 8 # 字串加單引號 class SingleQuoted(str): pass def representer(dumper, data): return dumper.represent_scalar(\u0026#39;tag:yaml.org,2002:str\u0026#39;, data, style=\u0026#34;\u0026#39;\u0026#34;) yaml.add_representer(SingleQuoted, representer) 這段程式會讓所有字串輸出時自動加上單引號 ‘…’，例如 ‘P-0601.主機A’ 1 2 3 4 # 縮排 class IndentDumper(yaml.Dumper): def increase_indent(self, flow=False, indentless=False): return super().increase_indent(flow, indentless=False) 這段確保 YAML 檔案縮排正確，避免列表格式錯亂問題 4.資料轉換函式 這個函式會逐筆讀取 Excel 每一列資料，轉成 dictionary 並處理欄位轉換與格式化。\n1 2 3 4 5 6 7 8 # 資料轉換 def rows2dict(data_rows, key_map, list_fields): result = [] for row in data_rows: item = {} id = str(row.get(\u0026#34;設備編號\u0026#34;, \u0026#34;\u0026#34;)).strip() name = str(row.get(\u0026#34;設備名稱\u0026#34;, \u0026#34;\u0026#34;)).strip() id 是設備編號，例如 P-0601 name 是設備名稱，例如 P-0601主機A，我們會試著從中拆出和設備編號重複的部分。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 for col_name, value in row.items(): if col_name == \u0026#34;設備編號\u0026#34;: continue key = key_map.get(col_name, col_name) # 處理 name 欄位 if key == \u0026#34;name\u0026#34;: # 嘗試找到 id 的前綴在 name 中出現的位置 for i in range(len(id), 0, -1): prefix = id[:i] if name.startswith(prefix): suffix = name[len(prefix):] name_suffix = re.sub(r\u0026#39;^[\\s\\-:]+\u0026#39;, \u0026#39;\u0026#39;, suffix).strip() item[key] = SingleQuoted(f\u0026#34;{id}.{name_suffix}\u0026#34;) break else: # 如果完全沒有前綴相符，就用原始 name item[key] = SingleQuoted(f\u0026#34;{id}.{name}\u0026#34;) continue 這段會試圖從名稱中把編號前綴抽出，只保留剩下的「設備名稱」部分。 效果如下: 設備編號 設備名稱 輸出name A-1234 設備A A-1234.設備A B-2345 B-2345設備B B-2345.設備B C-3456 #1設備C C-3456.#1設備C 1 2 3 4 5 6 7 8 9 value_str = str(value).strip() if key in list_fields: item[key] = [SingleQuoted(value_str)] else: item[key] = SingleQuoted(value_str) result.append(item) return result machineSystems 等欄位會以 YAML 陣列格式輸出，例如： machineSystems: ‘油壓系統’ 5.主函式 這個主程式會：\n開啟 Excel 篩選需要的欄位 呼叫 rows2dict() 處理資料 將結果輸出為 YAML 檔案 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def excel2yaml( excel_path, sheet_name=0, selected_columns=None, key_map=None, list_fields=None, output_name=None ): # 讀取 xls = pd.ExcelFile(excel_path) title = xls.sheet_names[sheet_name] if isinstance(sheet_name, int) else sheet_name df = pd.read_excel(xls, sheet_name=sheet_name) if selected_columns: df = df[selected_columns] data_rows = df.to_dict(orient=\u0026#34;records\u0026#34;) transformed_data = rows2dict( data_rows, key_map or {}, list_fields or [] ) # 輸出結構 dict = {output_name or title: transformed_data} output_file = f\u0026#34;{output_name or title}.yaml\u0026#34; with open(output_file, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: yaml.dump( dict, f, allow_unicode=True, sort_keys=False, width=float(\u0026#34;inf\u0026#34;), indent=YAML_INDENT, Dumper=IndentDumper ) print(f\u0026#34;輸出完成：{output_file}\u0026#34;) 6.程式執行 當程式被直接執行時，會呼叫 excel2yaml() 並帶入我們預先設定的參數。\n1 2 3 4 5 6 7 8 9 10 # 執行程式 if __name__ == \u0026#34;__main__\u0026#34;: excel2yaml( excel_path=EXCEL_PATH, sheet_name=SHEET_NAME, selected_columns=SELECTED_COLUMNS, key_map=KEY_MAP, list_fields=LIST_FIELDS, output_name=OUTPUT_SHEET_NAME ) 以下為轉換後的 YAML 範例（含單引號與縮排）： 1 2 3 4 5 觀音廠: - name: \u0026#39;B-0117.#1M系收塵風機\u0026#39; machineType: \u0026#39;M系風車\u0026#39; machineSystems: - \u0026#39;研磨系統#1#2\u0026#39; 完整程式碼檔案: 🔗 excel2yaml.py\n","date":1751608224,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"98de5f0438edc1b03e1a3fbcbc4afe96","permalink":"https://bgb941207.github.io/work-log/post/excel_to_yaml/","publishdate":"2025-07-04T13:50:24+08:00","relpermalink":"/work-log/post/excel_to_yaml/","section":"post","summary":"excel轉成yaml檔的程式","tags":null,"title":"Excel_to_yaml.py","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY4 1.完成八里廠新系統舊資料輸入與初始化\n2.修改excel_to_yaml程式已知問題 =\u0026gt; 新增編號重複之命名問題\n","date":1751599147,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"3cdc2d55bae0b3c26489c58353ffdd2d","permalink":"https://bgb941207.github.io/work-log/post/20250704/","publishdate":"2025-07-04T11:19:07+08:00","relpermalink":"/work-log/post/20250704/","section":"post","summary":"工作日誌DAY4","tags":null,"title":"2025-07-04","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY3 1.excel轉yaml程式優化\n2.學習在vscode中以node.js環境使用typescript和javascript語言\n3.協助將八里廠google sheet資料匯入新系統中\n","date":1751508491,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"5c3e4d4255c0371bc5bcd6cdae13fa4b","permalink":"https://bgb941207.github.io/work-log/post/20250703/","publishdate":"2025-07-03T10:08:11+08:00","relpermalink":"/work-log/post/20250703/","section":"post","summary":"工作日誌DAY3","tags":null,"title":"2025-07-03","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY2 1.早上開了晨會\n2.完成工作日誌網站構建\n3.下午填寫八里廠報修單歷史資料\n4.寫了一個小程式把excel轉乘yaml\n","date":1751422091,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"52ef2ddecdb14faa99378c374e30e24c","permalink":"https://bgb941207.github.io/work-log/post/20250702/","publishdate":"2025-07-02T10:08:11+08:00","relpermalink":"/work-log/post/20250702/","section":"post","summary":"工作日誌DAY2","tags":null,"title":"2025-07-02","type":"post"},{"authors":null,"categories":null,"content":"工作日誌DAY1 1.學習了git和hugo的架構與創建實作\n2.閱讀MTBF相關手冊和系統登入\n","date":1751420070,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752566748,"objectID":"be3d5cf9cd6acbc273a36563933ffdd6","permalink":"https://bgb941207.github.io/work-log/post/my-first-post/","publishdate":"2025-07-02T09:34:30+08:00","relpermalink":"/work-log/post/my-first-post/","section":"post","summary":"工作日誌DAY1","tags":null,"title":"2025-07-01","type":"post"}]